{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RoServices","text":""},{"location":"#an-introduction","title":"An Introduction","text":"<p>Welcome to RoServices! We're a company that provides state of the art technology for all of your group management needs. Our service offers a plethora of products along with easy configuration and maintenance. </p> <p>These Docs will provide detailed steps on how you can set up and get going! </p> <p>Head on over to the Dashboard setup to get started!</p> <p>Happy POSTing!</p>"},{"location":"API/APIguide/","title":"API Overview Guide","text":"<p>The RoServices API is designed to allow clients to create their own programs within Roblox or other applications such as Discord.</p> <p>All endpoints have the base URL of https://api.roservices.app.</p>"},{"location":"API/APIguide/#authorization","title":"Authorization","text":"<p>The header of <code>key</code>: (gamekey) is needed to access the API.</p>"},{"location":"API/APIguide/#api-ranking-end-points","title":"API Ranking End Points","text":"<p>/api/ranking/demote/</p> <p>/api/ranking/promote/</p> <p>/api/ranking/handlejoinrequest/</p> <p>/api/ranking/setrank/</p> <p>/api/ranking/shout/</p> <p>/api/ranking/exile/</p>"},{"location":"API/APIguide/#token-end-points","title":"Token End Points","text":"<p>/api/tokens/generate/</p>"},{"location":"API/Explanations/Exile/","title":"Exile","text":"<p>this is the flowchart exile uses</p>"},{"location":"API/Ranking/Demote/","title":"Demote [POST]","text":"<p><code>/api/ranking/demote/</code></p> <p>This endpoint demotes the specified user.</p>"},{"location":"API/Ranking/Demote/#request-body","title":"Request Body","text":"Body Description Type <code>userId</code> The user who you want to demote <code>INTEGER</code> <code>groupId</code> The group which the user is in <code>INTEGER</code>"},{"location":"API/Ranking/Demote/#examples","title":"Examples","text":"JavascriptPythonLuau <pre><code>async function demote() {\nconst response = await fetch('https://api.roservices.app/api/ranking/demote', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\n'key': 'YOUR GAMEKEY HERE'\n},\nbody: JSON.stringify({ userId: 'USER ID HERE', groupId: 'GROUP ID HERE' })\n});\nreturn response.json();\n}\n</code></pre> <pre><code>import requests\n\ndef demote(userId, groupId):\n    data = {'userId': userId, 'groupId': groupId} # Don't need to change anything here\n    headers = {'content-type': 'application/json', 'key': 'PUT YOUR GAMEKEY HERE'}\n\n    request = requests.post('https://api.roservices.app/api/ranking/demote', json=data, headers=headers)\n\n    if request.status_code == 200:\n        return request.json(), \"f{userId} Has been demoted successfully!\"\n    else:\n        return \"Something went wrong!\"\n'''\nReplace 1 with user id\nReplace 2 with group id\n'''\ndemote(1, 2) \n</code></pre> <pre><code>local HttpService = game:GetService(\"HttpService\")\nlocal URL = \"https://api.roservices.app/api/ranking/demote\"\nlocal function request()\nlocal response = HttpService:RequestAsync(\n    {\n        Url = URL, \n        Method = \"POST\",\n        Headers = {\n            [\"Content-Type\"] = \"application/json\",\n            [\"key\"] = \"YOUR GAMEKEY HERE\"\n        },\n        Body = HttpService:JSONEncode({ userId = \"USER ID HERE\", groupId = \"GROUP ID HERE\"})\n    }\n)\n     if response.Success then\n        print(\"Status code:\", response.StatusCode, response.StatusMessage)\n        print(\"Response body:\\n\", response.Body)\n    else\n        print(\"The request failed:\", response.StatusCode, response.StatusMessage)\n    end\nend\n\nlocal success, message = pcall(request)\nif not success then\n    print(\"Http Request failed:\", message)\nend\n</code></pre>"},{"location":"API/Ranking/Exile/","title":"Exile [POST]","text":"<p><code>/api/ranking/exile/</code></p> <p>This endpoint exiles the specified user.</p> <p>You need to open a ticket in our Discord server to request the exile endpoint be enabled for your group.</p>"},{"location":"API/Ranking/Exile/#request-body","title":"Request Body","text":"Body Description Type <code>userId</code> The user who you want to exile <code>INTEGER</code> <code>groupId</code> The group which the user is in <code>INTEGER</code> <code>token</code> Exile token <code>STRING</code> <p>How do I generate exile tokens? How does exile work?</p>"},{"location":"API/Ranking/HandleRequest/","title":"Handle Join Request [POST]","text":"<p><code>/api/ranking/handlejoinrequest/</code></p> <p>This endpoint accepts or denies the provided join request.</p>"},{"location":"API/Ranking/HandleRequest/#request-body","title":"Request Body","text":"Body Description Type <code>userId</code> The user who's join request you want to handle <code>INTEGER</code> <code>groupId</code> The group which you want to look for the join request <code>INTEGER</code> <code>boolean</code> Should the join request be accepted? <code>BOOLEAN</code>"},{"location":"API/Ranking/HandleRequest/#examples","title":"Examples","text":"JavascriptPythonLuau <pre><code>async function handleRequest() {\nconst response = await fetch('https://api.roservices.app/api/ranking/handlejoinrequest', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\n'key': 'YOUR GAMEKEY HERE'\n},\nbody: JSON.stringify({ userId: 'USER ID HERE', groupId: 'GROUP ID HERE', boolean: true/false })\n});\nreturn response.json();\n}\n</code></pre> <pre><code>import requests\n\ndef handleRequest(userId, groupId, boolean):\n    data = {'userId': userId, 'groupId': groupId, 'boolean': boolean} # Don't need to change anything here\n    headers = {'content-type': 'application/json', 'key': 'PUT YOUR GAMEKEY HERE'}\n\n    request = requests.post('https://api.roservices.app/api/ranking/handlejoinrequest', json=data, headers=headers)\n\n    if request.status_code == 200:\n        return request.json(), \"f{userId} has been accepted into the group.\"\n    else:\n        return \"Something went wrong!\"\n'''\nReplace 1 with user id you want to accept\nReplace 2 with group id\nReplace true/false\n'''\nhandleRequest(1, 2, true/false) \n</code></pre> <pre><code>local HttpService = game:GetService(\"HttpService\")\nlocal URL = \"https://api.roservices.app/api/ranking/handlejoinrequest\"\nlocal function request()\nlocal response = HttpService:RequestAsync(\n    {\n        Url = URL, \n        Method = \"POST\",\n        Headers = {\n            [\"Content-Type\"] = \"application/json\",\n            [\"key\"] = \"YOUR GAMEKEY HERE\"\n        },\n        Body = HttpService:JSONEncode({userId = \"USER ID HERE\", groupId = \"GROUP ID HERE\", boolean: true/false})\n    }\n)\n     if response.Success then\n        print(\"Status code:\", response.StatusCode, response.StatusMessage)\n        print(\"Response body:\\n\", response.Body)\n    else\n        print(\"The request failed:\", response.StatusCode, response.StatusMessage)\n    end\nend\n\nlocal success, message = pcall(request)\nif not success then\n    print(\"Http Request failed:\", message)\nend\n</code></pre>"},{"location":"API/Ranking/Promote/","title":"Promote [POST]","text":"<p><code>/api/ranking/promote/</code></p> <p>This endpoint promotes the specified user.</p>"},{"location":"API/Ranking/Promote/#request-body","title":"Request Body","text":"Body Description Type <code>userId</code> The user who you want to promote <code>INTEGER</code> <code>groupId</code> The group which the user is in <code>INTEGER</code>"},{"location":"API/Ranking/Promote/#examples","title":"Examples","text":"JavascriptPythonLuau <pre><code>async function promote() {\nconst response = await fetch('https://api.roservices.app/api/ranking/promote', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\n'key': 'YOUR GAMEKEY HERE'\n},\nbody: JSON.stringify({ userId: 'USER ID HERE', groupId: 'GROUP ID HERE' })\n});\nreturn response.json();\n}\n</code></pre> <pre><code>import requests\n\ndef promote(userId, groupId):\n    data = {'userId': userId, 'groupId': groupId} # Don't need to change anything here\n    headers = {'content-type': 'application/json', 'key': 'PUT YOUR GAMEKEY HERE'}\n\n    request = requests.post('https://api.roservices.app/api/ranking/promote', json=data, headers=headers)\n\n    if request.status_code == 200:\n        return request.json(), \"f{userId} Has been promoted successfully!\"\n    else:\n        return \"Something went wrong!\"\n'''\nReplace 1 with user id\nReplace 2 with group id\n'''\npromote(1, 2) \n</code></pre> <pre><code>local HttpService = game:GetService(\"HttpService\")\nlocal URL = \"https://api.roservices.app/api/ranking/promote\"\nlocal function request()\nlocal response = HttpService:RequestAsync(\n    {\n        Url = URL, \n        Method = \"POST\",\n        Headers = {\n            [\"Content-Type\"] = \"application/json\",\n            [\"key\"] = \"YOUR GAMEKEY HERE\"\n        },\n        Body = HttpService:JSONEncode({userId = \"USER ID HERE\", groupId = \"GROUP ID HERE\"})\n    }\n)\n     if response.Success then\n        print(\"Status code:\", response.StatusCode, response.StatusMessage)\n        print(\"Response body:\\n\", response.Body)\n    else\n        print(\"The request failed:\", response.StatusCode, response.StatusMessage)\n    end\nend\n\nlocal success, message = pcall(request)\nif not success then\n    print(\"Http Request failed:\", message)\nend\n</code></pre>"},{"location":"API/Ranking/Setrank/","title":"SetRank [POST]","text":"<p><code>/api/ranking/setrank/</code></p> <p>This endpoint sets the rank of a specified user.</p>"},{"location":"API/Ranking/Setrank/#request-body","title":"Request Body","text":"Body Description Type <code>userId</code> The user who's rank you want to change (id) <code>INTEGER</code> <code>groupId</code> The group which you want to look for the join request <code>INTEGER</code> <code>rankId</code> The rank id you want the user ranked to <code>INTEGER</code>"},{"location":"API/Ranking/Setrank/#examples","title":"Examples","text":"JavascriptPythonLuau <pre><code>async function setRank() {\nconst response = await fetch('https://api.roservices.app/api/ranking/setrank', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\n'key': 'YOUR GAMEKEY HERE'\n},\nbody: JSON.stringify({ user: 'USER ID HERE', group: 'GROUP ID HERE', rankid: 'RANK ID HERE' })\n});\nreturn response.json();\n}\n</code></pre> <pre><code>import requests\n\ndef setRank(userId, groupId, rankId):\n    data = {'userId': userId, 'groupId': groupId, 'rankId': rankId} # Don't need to change anything here\n    headers = {'content-type': 'application/json', 'key': 'PUT YOUR GAMEKEY HERE'}\n\n    request = requests.post('https://api.roservices.app/api/ranking/setrank', json=data, headers=headers)\n\n    if request.status_code == 200:\n        return request.json(), \"f{userId} Has been ranked successfully!\"\n    else:\n        return \"Something went wrong!\"\n'''\nReplace 1 with user id\nReplace 2 with group id\nReplace 3 with rank id\n'''\nsetRank(1, 2, 3) \n</code></pre> <pre><code>local HttpService = game:GetService(\"HttpService\")\nlocal URL = \"https://api.roservices.app/api/ranking/setrank\"\nlocal function request()\nlocal response = HttpService:RequestAsync(\n    {\n        Url = URL, \n        Method = \"POST\",\n        Headers = {\n            [\"Content-Type\"] = \"application/json\",\n            [\"key\"] = \"YOUR GAMEKEY HERE\"\n        },\n        Body = HttpService:JSONEncode({userId = \"USER ID HERE\", groupId = \"GROUP ID HERE\", rankId: \"RANK ID HERE\"})\n    }\n)\n     if response.Success then\n        print(\"Status code:\", response.StatusCode, response.StatusMessage)\n        print(\"Response body:\\n\", response.Body)\n    else\n        print(\"The request failed:\", response.StatusCode, response.StatusMessage)\n    end\nend\n\nlocal success, message = pcall(request)\nif not success then\n    print(\"Http Request failed:\", message)\nend\n</code></pre>"},{"location":"API/Ranking/Shout/","title":"Shout [POST]","text":"<p><code>/api/ranking/shout/</code></p> <p>This endpoint shouts a specified message in the specified group.</p>"},{"location":"API/Ranking/Shout/#request-body","title":"Request Body","text":"Body Description Type <code>groupId</code> The group which you want to shout in <code>INTEGER</code> <code>message</code> The message you want posted on the shout <code>STRING</code>"},{"location":"API/Ranking/Shout/#examples","title":"Examples","text":"JavascriptPythonLuau <pre><code>async function shout() {\nconst response = await fetch('https://api.roservices.app/api/ranking/shout', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\n'key': 'YOUR GAMEKEY HERE'\n},\nbody: JSON.stringify({ group: 'GROUP ID HERE', message: 'SHOUT MESSAGE HERE' })\n});\nreturn response.json();\n}\n</code></pre> <pre><code>import requests\n\ndef shout(groupId, message):\n    data = {'groupId': groupId, 'message': message} # Don't need to change anything here\n    headers = {'content-type': 'application/json', 'key': 'PUT YOUR GAMEKEY HERE'}\n\n    request = requests.post('https://api.roservices.app/api/ranking/promote', json=data, headers=headers)\n\n    if request.status_code == 200:\n        return request.json(), \"f{message} has been sent successfully!\"\n    else:\n        return \"Something went wrong!\"\n'''\nReplace 1 with user id\nReplace message with what you want to shout\n'''\nshout(1, \"message\") \n</code></pre> <pre><code>local HttpService = game:GetService(\"HttpService\")\nlocal URL = \"https://api.roservices.app/api/ranking/shout\"\nlocal function request()\nlocal response = HttpService:RequestAsync(\n    {\n        Url = URL, \n        Method = \"POST\",\n        Headers = {\n            [\"Content-Type\"] = \"application/json\" ,\n            [\"key\"] = \"YOUR GAMEKEY HERE\"\n        },\n        Body = HttpService:JSONEncode({group = \"GROUP ID HERE\", message: \"SHOUT MESSAGE HERE\"})\n    }\n)\n     if response.Success then\n        print(\"Status code:\", response.StatusCode, response.StatusMessage)\n        print(\"Response body:\\n\", response.Body)\n    else\n        print(\"The request failed:\", response.StatusCode, response.StatusMessage)\n    end\nend\n\nlocal success, message = pcall(request)\nif not success then\n    print(\"Http Request failed:\", message)\nend\n</code></pre>"},{"location":"API/Tokens/GenToken/","title":"Token Generation","text":"<p>You need to open a ticket in our Discord server to request the exile/token generation endpoint be enabled for your group.</p>"},{"location":"API/Tokens/GenToken/#generate-token-post","title":"Generate Token [POST]","text":"<p><code>/api/tokens/generate/</code></p> <p>This endpoint generates token.</p>"},{"location":"API/Tokens/GenToken/#request-body","title":"Request Body","text":"Body Description Type <code>userId</code> The user <code>INTEGER</code> <code>groupId</code> The group which the user is in <code>INTEGER</code> <code>type</code> Type (exile) <code>STRING</code>"},{"location":"BotExamples/dpy/","title":"Bot Example - discord.py","text":"<p>This page will provide a basic example of a discord bot built with discord.py with the purpose of using our API.</p> Libraries Install discord.py <code>pip install discord.py</code> aiohttp <code>comes with dpy</code> json <code>default with py</code> Bot <pre><code>import discord\nimport aiohttp\nimport json\nfrom discord.ext import commands\n\n## FYI: This bot is a very basic example on how to use the d.py library with RoServices API. It should not really be used for anything practical. \n\nintents = discord.Intents.all() # Setting intents to all for the sake of convenience\n\nbot_description = '''\nA basic Python Discord bot made to serve as an example on using the RoServices API. \n'''\n\nclass SampleBot(commands.Bot):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    async def on_ready(self):\n        print(f'{self.user} is online, on discord.py - {discord.__version__}')\n\n    async def setup_hook(self):\n        self.session = aiohttp.ClientSession()\n\n    async def close(self):\n        await self.session.close()\n\n\nbot = SampleBot(\n    command_prefix=\"r!\", # Change your prefix\n    description=bot_description,\n    intents=intents,\n)\n\ngroupid = 0 # Put group id\ngamekey = '' # put game key\n\nasync def promoteUser(user):\n    body = {'userId': user, 'groupId': groupid}\n    headers = {'content-type': 'application/json', 'key': gamekey}\n\n    r = await bot.session.post('https://api.roservices.app/api/ranking/promote', data=json.dumps(body), headers=headers)\n\n    if r.status == 200:\n        return \"That user has been successfully promoted!\"\n    else:\n        return \"Something went wrong!\"\n\nasync def setRank(user, rank):\n    body = {'userId': user, 'groupId': groupid, 'rank': rank}\n    headers = {'content-type': 'application/json', 'key': gamekey}\n\n    r = await bot.session.post('https://api.roservices.app/api/ranking/setrank', data=json.dumps(body), headers=headers)\n    print(\"Status:\" + r.status)\n\n    if r.status == 200:\n        return \"That user has been successfully ranked!\"\n    else:\n        return \"Something went wrong!\"\n\n\n@bot.command()\nasync def promote(ctx, user: int):\n    promotion = await promoteUser(user)\n    await ctx.send(promotion)\n\n\n@bot.command()\nasync def setrank(ctx, user: int, rank: int):\n    ranking = await setRank(user, rank)\n    await ctx.send(ranking)\n\n\nbot.run('') # Bot Token goes here\n</code></pre>"},{"location":"Setup/ApplicationCenter/","title":"Application Center","text":""},{"location":"Setup/ApplicationCenter/#application-center-configuration","title":"Application Center Configuration","text":"<p>The application center is a very customizable and user friendly system which allows a player to do an application, and once passed, it will automatically give them a rank you specify! </p> Prerequisites - Make sure you have these done before continuing <p>Go to Setup Instructions</p> <ul> <li>Bot Account Set up </li> <li>Place Whitelisted</li> <li>Valid Gamekey</li> </ul> How to publish your game <p>To publish a game, head on over to the top left corner and hit file. </p> <p></p> <p>Then press \"Publish to Roblox\"</p> <p></p> <p>Congrats</p> How to turn on required services <p>To turn on required services, make sure the game is published then head over to the game settings tab.</p> <p></p> <p>Then turn on allow HTTP Requests, Third Party Teleports, and Third Party Sales.</p> <p></p> <p>Services are now on</p>"},{"location":"Setup/ApplicationCenter/#template-setup","title":"Template Setup","text":"Overview <p>Open the application center template you have downloaded. </p> <p>What it should look like when you open it:</p> <p></p> <p> Now, publish the game and turn on HTTP Requests, third party teleports, and studio api (optional) </p> <p>Once you've done that, head over to the Explorer tab and click the little arrow next to ServerScriptService, open the RemoteEvents folder then and double click the script called APIHandler.</p> <p></p> <p>When you open the script, you should see this. This is where all of the basic configuation is done.</p> <p></p> Getting group ID + setting variable <ol> <li> <p>Head to your group on the ROBLOX page. </p> </li> <li> <p>Go to the top of your search bar and double click on the numbers. </p> </li> <li>Then, right click and press copy.</li> </ol> <p></p> <ol> <li>Next, paste that into the Group variable.</li> </ol> <p>You're now done with that!*</p> <p> groupID Variable : - The group Variable is used to define what group this rank center is for. Remove the numbers that are in it and replace it with your group ID. (Click the Click to see arrow below)</p> <p> gameKey Variable : - Copy &amp; Paste your gamekey (obtained in the dashboard) into there.</p> <p> rankID Variable : - This variable is the rank the user will get once they pass the application. </p> <p> successMessage Variable : - Set the message you want to say after a user has passed the application.</p> <p>To change how many lives you get in the application, change this INT value located in StarterGui under the Values folder in the screenGUI.</p> <p></p> <p>End of APIHandler Setup</p>"},{"location":"Setup/ApplicationCenter/#question-setup","title":"Question Setup","text":"Configuration (Module) <p>To configure the Application questions &amp; some UI elements, head to ReplicatedStorage, open the Modules folder -&gt; UI_Settings -&gt; Core</p> <p></p> <p>After opening the Module, you should see something similar to this</p> <p></p> <p>Start by putting your group name and center name into these fields. If you want Dark theme, put \"Dark\" in the theme value. Otherwise, leave it blank if you're making your own UI.</p> <p></p> <p>Then Start Configuring the questions.</p> <p>Things to remember:</p> <ul> <li>Adjust the Amount Variable to how many questions you have</li> <li>All Questions require 4 answer choices</li> <li>Change the number after \"Question\" to the question number.</li> </ul> <p></p> Adding Questions <p>Adding and removing questions is a very basic process. In order to do this, find the questions dictionary, it should look like this:</p> <p></p> <p>By default the application center comes with three pre-made questions. Replace each value with whatever you want for it.</p> <ul> <li> Values in the Questions' dictionary :<ul> <li>Question number: Put in the question number. </li> <li>Question: Put the question you want the user to answer iside of the quotes.</li> <li>Answers: 4 Answer choices are required. Replace whatever is in the quotes with the answer you want to put.</li> <li>Correct answer: put the number of the correct answer.</li> </ul> </li> </ul> <p>Adding questions</p> <p>To add a question, copy one of the question dictionaries, and paste it after an };. Then change the question number to the question it is. (Remember to change the total number of questions as well!)</p> <pre><code>Question1 = {\n            Question = \"Who is god?\";\n            Answer1 = \"Ava\";\n            Answer2 = \"Billy\";\n            Answer3 = \"Brandon\";\n            Answer4 = \"idk\";\n            CorrectAnswer = 1;\n        };\n</code></pre> <p></p> Removing Questions <p>To remove questions, its pretty simple. Do the exact same thing as adding a question, except delete the question. </p> <p></p> UI Configuration <p>Like many others, we believe that the ability to customize things to your personal liking is an absolute. Our Application Centers allow you to adjust or even redesign the template UI. To get started go StarterGUI and open up the ScreenGUI. Feel free to do whatever you want.</p> <p></p>"},{"location":"Setup/Dashboard/","title":"RoServices Set-up Guide","text":"<p> Welcome to RoServices! Thank you for choosing us for reliable ranking and group management services. Everything to know about our service, from dashboard setup to getting an overview of current templates will be provided on this page. </p>"},{"location":"Setup/Dashboard/#section-1-dashboard-set-up","title":"Section 1: Dashboard Set-up","text":"<p>In order to use any of our products, you must first verify your account and configure a bot account to handle requests.</p> Premium Purchasing Guide <p>Please head to Our Website and log into your Discord account. </p> <p>Once you've logged in, select a group, click purchase, choose a payment method, and then purchase premium. Congrats! You now have premium! </p> <ul> <li>Everything included with premium:<ul> <li>Extra Templates (Ranking Sticks)</li> <li>Faster Overall Ranking</li> <li>View Ranking Data</li> <li>Priority Support</li> <li>Webhook logging</li> </ul> </li> </ul> <p>If you have any questions or concerns, join our discord server and create a ticket </p> <p>\"you will die if you dont have premium\": - brandon</p> Bot Account Setup <p>If you don't already have a bot account, please go to roblox.com and create one. </p> <p>To set up a bot account you have two options: one is using username + password (recommended) or using the account cookie (not recommended as its unreliable and requires you to use a VPN). </p> <p>In the dashboard, click the box that says ROBLOX. You should see something similar to this. </p> <p> Input your BOT accounts username + password and complete the captcha, you should be logged in after that.</p> <p>You've now setup your bot!</p> Game Whitelisting (Application and Rank Center Only! <p>In order for the Application and Rank centers' to function correctly you need to whitelist the game ID. To do this, follow the steps below. </p> <p>Click the first box named GAME. You should see something similar to this.  (Ignore Gamekey for now)</p> <p>On the right side where it says Game Whitelist put in the place ID of the game that the application or rank centers are. Once you do that, you'll be good to go!</p> Getting Place ID <p>Go to Roblox where you published your template under, click the search bar, and copy the numbers. </p> <p></p> Blacklisting Users <p>To blacklist a user, go to the section that says BLACKLIST then put in the username of the person you wish to blacklist and click add.</p> <p></p> Webhooks (Premium) <p>In order to receive logs into your Discord server, please create a webhook in a channel, copy it, then paste it into the box that says \"Webhook URL\". Afterwards, select which type of logs you'd want to receive and press SAVE.</p> <p></p> Stats (Premium) <p>If you want a extensive look at requests which have succeeded or failed, click the stats panel then download a CSV file that contains all of the necessary data.</p> <p></p>"},{"location":"Setup/Dashboard/#section-2-templates","title":"Section 2: Templates","text":"<p> You can download all of the templates on the dashboard! </p> Accessing Templates on the dashboard <p>Head to the dashboard, click the group you want to manage then the templates tab. Use the circles in the area highlighted with pink to switch pages.</p> <p></p> Template Description Notes <code>API Module</code> The API module will allow you to create your own custom things. You need a valid license to use this product. <code>Adonis Plug-in</code> A plugin for the very popular Roblox admin system, adonis. This plugin allows you to use ranking commands in addition to what Adonis already comes with! Adonis Admin is not Affilated with RoServices in any way. This plugin is just an extension to make it compatible with our service. <code>Basic Admin Plug-in</code> Plugin for another very popular Roblox admin system, Basic admin. This plugin allows you to use ranking commands in addition to what Basic Admin already comes with! Basic Admin is not Affilated with RoServices in any way. This plugin is just an extension to make it compatible with our service. <code>Ranking Commands</code> Our own admin system if you don't want to use plugins. You need a valid license to use this product. <code>Application Center</code> One of our most popular products, the application center allows clients to easily set up a fully customizable, auto-ranking, and very secure quiz to hire new members seemlessly! You need a valid license to use this product. <code>Rank Center</code> A template that allows users to purchase ranks in exchange for Robux. You need a valid license to use this product. <code>Rank Check Button</code> A template that allows users to purchase ranks in exchange for Robux in game You need a valid license to use this product. <code>Auto Promotion Point System</code> This product allows the promotion of a user if they reach a required amount of points in game. All ranks, point values etc are fully customizable. You need a valid license to use this product. <code>Ranking Sticks</code> Similar to ranking commands, except this is a tool. You'll hit the user with the designated function and it will do it You need a valid license to use this product."},{"location":"Setup/RankCenter/","title":"Rank Center","text":""},{"location":"Setup/RankCenter/#rank-center-configuration","title":"Rank Center Configuration","text":"<p>The Rank Center is a template that allows clients to sell ranks as gamepasses. With this product, customers can automatically get roled and the client won't need to worry about confirming if said user truly has bought the rank!</p> Prerequisites - Make sure you have these done before continuing <p>Go to Setup Instructions</p> <ul> <li>Bot Account Set up </li> <li>Place Whitelisted</li> <li>Valid Gamekey</li> </ul> How to publish your game <p>To publish a game, head on over to the top left corner and hit file. </p> <p></p> <p>Then press \"Publish to Roblox\"</p> <p></p> <p>Congrats</p> How to turn on required services <p>To turn on required services, make sure the game is published then head over to the game settings tab.</p> <p></p> <p>Then turn on allow HTTP Requests, Third Party Teleports, and Third Party Sales.</p> <p></p> <p>Services are now on</p>"},{"location":"Setup/RankCenter/#template-setup","title":"Template Setup","text":"Overview &amp; Variable Setup <p>After downloading the template, please open it in Roblox Studio. What it should look like when you open it:</p> <p></p> <p>Once you've done that, head over to the Explorer tab and open ServerScriptService. Then, double click the module named Configuration to open it. </p> <p></p> <p>After opening the module, you should be greeted with some code that look like this. Here is where all of the configuration is done.</p> <p></p> <p>Now, let's talk about what each of these variables do and what the dictionary is used for.</p> Getting group ID + setting variable <ol> <li> <p>Head to your group on the ROBLOX page. </p> </li> <li> <p>Go to the top of your search bar and double click on the numbers. </p> </li> <li>Then, right click and press copy.</li> </ol> <p></p> <ol> <li>Next, paste that into the Group variable.</li> </ol> <p>You're now done with that!*</p> <ul> <li> <p>Variables</p> <ul> <li> <p> Group Variable : The group variable is used to define what group this rank center is for. Remove the numbers that are in it and replace it with your group ID. </p> </li> <li> <p> GameKey Variable : The <code>GameKey</code> variable is set the place ID. DO NOT CHANGE THIS. </p> </li> <li> <p> OneTimeRedemption Variable : This variable if set to true, it will make it so the person who is claiming the rank can only redeem it once. This means that if the person claims a rank, they will not be able to claim that specific rank again. </p> </li> </ul> </li> </ul> Dictionary Configuration <p>This dictionary contains three values which are essential for the rank center to function as intended. The Rank ID value, Rank Name value, and the GamePass value. Please see below on how you configure this.</p> Configuring Rank ID <p>Head to your group on the ROBLOX page. </p> <p>Go to the top right, press the three dots, then click \"configure group\". </p> <p>Press roles then copy the number of the rank you want to sell.</p> <p></p> <p>Go back to studio then replace the RankID variable with that number.</p> <p></p> Configuring Rank Name <p>Next replace the text in \"Rank Name\" with the name of the role associated with the ID.</p> <p></p> Configuring Gamepass ID <p>Go to the gamepass on Roblox then copy the the ID.</p> <p></p> <p>Afterwards, replace the current numbers in <code>GamePass</code> with your id. </p> <p>Now you're done with the studio set up!</p> Adding Ranks <p>To add more ranks: Copy this below and paste it after each }; <pre><code>{\nRankID = 0; -- Change to the Rank ID\nRankName = \"\"; -- Put the name of the Rank\nisFree = false; --&lt;= if you want the rank to be free set it to true and set GamePass to 0 or nil.\nGamePass = 0; -- set the gamepass ID\n}; \n</code></pre></p> <p></p> Removing Ranks <p>I removed three ranks here, if you only want to remove one, do as I did but only select one. </p>"}]}